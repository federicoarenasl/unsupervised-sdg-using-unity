# General information
dataset: 'tyolUnity'
seed: 1337

# Information about paths to be used during training to log information
config: 'data/generator/config/5_classg_3_attr.json'
logdir: 'results/multi/3_attr'
variant_name: 'experimentX'
imagedir: 'images'
csvdir: 'progress'
graphdir: 'graphs'
weightsdir: 'weights'
gradsdir: 'gradients'
fmapsdir: 'feature_maps'
hparamsdir: 'hyperparameters'
# Description of the experiment
description: "In this experiment we start experimenting with multiple attributes."
# GCN network information
# Device for GCN network
device: 'cpu'

# GCN pretraining information
train_reconstruction: true
freeze_encoder: true
reconstruction_epochs: 75
dropout: 'None'

# MMD training information
print_freq: 5 # Every how many iterations we print MMD
distprint_freq: 1 # Every how many epochs we save the distribution
batch_size: 50 # batch size of generated data
num_real_images: 200 # batch size of real data
max_epochs: 10 # Maximum number of epochs to train MMD+task loss
epoch_length: 1000 # Number of samples that constitute one epoch
load_weights: false # Whether we load pretrained weights

# MMD calculation information
mmd_dims: [2048] # Sizes of layers of inception to use for MMD. Check 
                    # the inception file for possible values
mmd_resize_input: false
# With GeomLoss
geomloss:
  use_geomloss: false
  loss_metric: 'gaussian' # Choose from sinkhorn, hausdorff, energy, gaussian, laplacian


# Task loss information
use_dist_loss: true
use_task_loss: false
moving_avg_alpha: 0.7 # Moving_avg_alpha for baseline

# Optimizer hyperparameters for GCN
optim:
  lr: 0.001
  lr_decay: 2 # number of epochs to decay after
  lr_decay_gamma: 0.5 # gamma to decay
  weight_decay: 1.0e-05

# Optimizer hyperparameters for MMD Inception
optim_mmd:
  lr: 0.001
  lr_decay: 200 # number of epochs to decay after
  lr_decay_gamma: 0.5 # gamma to decay
  weight_decay: 0.00001
  use_mmd_loss: false

  # Weighting for losses
weight:
  class: 0.1 # weight for class during reconstruction training
  dist_mmd: 100 # multiplier for mmd

# Task net information
task:
  val_root: 'data/datagen/scenes/unity/3d_scene_tgt_multi/Builds/3dv2_Data/StreamingAssets/Snapshots'
  # data corresponding to the target configuration
  # usually you would generate one small version
  # and one large version of the target
  # Use the small version while training and 
  # the large version to report final results
  # this is not included in this code for simplicity
  # but is easy to add by editing the test 
  # function in the task network to report two
  # accuracies, out of which one would be used to train
  device: 'cpu'
  print_freq: 10
  freeze_encoder: true
  batch_size: 8
  input_dim: [32, 32]
  epochs: 10
  dataset: 'tyolUnity'